/**
 * This class is generated by jOOQ
 */
package com.iodesystems.iodecm.db.tables;


import com.iodesystems.iodecm.db.Keys;
import com.iodesystems.iodecm.db.Public;
import com.iodesystems.iodecm.db.tables.records.GroupMembersRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GroupMembers extends TableImpl<GroupMembersRecord> {

    private static final long serialVersionUID = 1729552615;

    /**
     * The reference instance of <code>public.group_members</code>
     */
    public static final GroupMembers GROUP_MEMBERS = new GroupMembers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GroupMembersRecord> getRecordType() {
        return GroupMembersRecord.class;
    }

    /**
     * The column <code>public.group_members.id</code>.
     */
    public final TableField<GroupMembersRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('group_members_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.group_members.username</code>.
     */
    public final TableField<GroupMembersRecord, String> USERNAME = createField("username", org.jooq.impl.SQLDataType.VARCHAR.length(50).nullable(false), this, "");

    /**
     * The column <code>public.group_members.group_id</code>.
     */
    public final TableField<GroupMembersRecord, Long> GROUP_ID = createField("group_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>public.group_members</code> table reference
     */
    public GroupMembers() {
        this("group_members", null);
    }

    /**
     * Create an aliased <code>public.group_members</code> table reference
     */
    public GroupMembers(String alias) {
        this(alias, GROUP_MEMBERS);
    }

    private GroupMembers(String alias, Table<GroupMembersRecord> aliased) {
        this(alias, aliased, null);
    }

    private GroupMembers(String alias, Table<GroupMembersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<GroupMembersRecord, Integer> getIdentity() {
        return Keys.IDENTITY_GROUP_MEMBERS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<GroupMembersRecord> getPrimaryKey() {
        return Keys.GROUP_MEMBERS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<GroupMembersRecord>> getKeys() {
        return Arrays.<UniqueKey<GroupMembersRecord>>asList(Keys.GROUP_MEMBERS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<GroupMembersRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<GroupMembersRecord, ?>>asList(Keys.GROUP_MEMBERS__FK_GROUP_MEMBERS_GROUP);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GroupMembers as(String alias) {
        return new GroupMembers(alias, this);
    }

    /**
     * Rename this table
     */
    public GroupMembers rename(String name) {
        return new GroupMembers(name, null);
    }
}
